/*global module:false require:false process*/
// eslint-disable-next-line
'use strict';
module.exports = function(grunt) {
  var env = grunt.option('env') || process.env.GRUNT_ENV || 'dev';

  require('time-grunt')(grunt);
  require('jit-grunt')(grunt);

  // Project configuration.
  grunt.initConfig({
    // Metadata.
    pkg: grunt.file.readJSON('package.json'),

    sass: {
      options: {
        sourceMap: (env === 'dev')
      },
      dist: {
        files: [{
          expand: true,
          cwd: 'src/scss/',
          src: ['*.scss'],
          dest: 'dist/css/',
          ext: '.css'
        }]
      },
      components: {
        files: [{
          expand: true,
          cwd: 'src/components/',
          src: ['**/*.scss'],
          dest: 'src/components/',
          ext: '.css'
        }]
      }
    },
    browserify: {
      options: {
        transform: ['babelify'],
        browserifyOptions: {
          debug: (env === 'dev')
        }
      },
      index: {
        src: ['src/js/index/index.js'],
        dest: 'dist/js/index/index.js'
      },
      editor: {
        src: ['src/js/editor/editor.js'],
        dest: 'dist/js/editor/editor.js'
      },
      admin: {
        src: ['src/js/admin/admin.js'],
        dest: 'dist/js/admin/admin.js'
      },
      components: {
        src: ['src/components/**/*.js'],
        dest: 'dist/js/components.js'
      }
    },
    'extract_sourcemap': {
      options: {
        'removeSourcesContent': true
      },
      components: {
        files: {
          'dist/js': ['dist/js/components.js']
        }
      },
      editor: {
        files: {
          'dist/js/editor': ['dist/js/editor/editor.js']
        }
      },
      index: {
        files: {
          'dist/js/index': ['dist/js/index/index.js']
        }
      },
      admin: {
        files: {
          'dist/js/admin': ['dist/js/admin/admin.js']
        }
      }

    },
    connect: {
      server: {
        options: {
          port: process.env.PORT || 3000,
          useAvailablePort: true,
          livereload: true,
          hostname: process.env.HOST || '0.0.0.0',
          base: 'dist'
        }
      }
    },
    watch: {
      scripts: {
        files: 'src/**/*',
        tasks: ['build'],
        options: {
          spawn: false,
          livereload: true
        }
      }
    },
    copy: {

      'js-sourcemaps': { // Needed for sourcemap. Hence, disting inside src folder
        cwd: 'src',
        src: '**/*.js',
        dest: 'dist/src',
        expand: true
      },
      'scss-sourcemaps': { // Needed for sourcemap. Hence, disting inside src folder
        cwd: 'src',
        src: '**/*.scss',
        dest: 'dist/src',
        expand: true
      },
      'assets': {
        cwd: 'src',
        src: 'assets/**/*',
        dest: 'dist/',
        expand: true
      }
    },
    eslint: {
      options: {
        configFile: './.eslintrc'
      },
      target: ['src/**/*.js']
    },
    vulcanize: {
      components: {
        options: {
          inlineCss: true,
          inlineScripts: false,
          stripComments: true
        },
        files: {
          'dist/components.html': 'src/components/components-list.html'
        }
      }
    },
    surround: {
      options: {
        prepend: '{{= codexImport}}'
      },
      files: {
        src: 'dist/components.html',
        dest: 'dist/components.html'
      }
    },
    'dom_munger': {
      components: {
        options: {
          remove: ['script[src]'],
          append: [{
            selector: 'body',
            html: '<script src="js/components.min.js"></script>'
          }]
        },
        src: 'dist/components.html',
        dest: 'dist/components.html'
      }
    },
    uglify: {
      options: {
        mangle: false,
        sourceMap: (env === 'dev'),
        sourceMapIncludeSources: true
      },
      components: {
        src: 'dist/js/components.js',
        dest: 'dist/js/components.min.js',
        options: {
          sourceMapIn: 'dist/js/components.js.map',
          sourceMapRoot: '../' // TODO: See if we can eliminate this redirection
        }
      },
      editor: {
        src: 'dist/js/editor/editor.js',
        dest: 'dist/js/editor/editor.min.js',
        options: {
          sourceMapIn: 'dist/js/editor/editor.js.map',
          sourceMapRoot: '../../'
        }
      },
      index: {
        src: 'dist/js/index/index.js',
        dest: 'dist/js/index/index.min.js',
        options: {
          sourceMapIn: 'dist/js/index/index.js.map',
          sourceMapRoot: '../../'
        }
      },
      admin: {
        src: 'dist/js/admin/admin.js',
        dest: 'dist/js/admin/admin.min.js',
        options: {
          sourceMapIn: 'dist/js/admin/admin.js.map',
          sourceMapRoot: '../../'
        }
      }
    },
    clean: ['dist']
  });

  configureBuildTask(env, grunt);
  configureTemplate(env, grunt);
  configureBootstrapTask(env, grunt);

  grunt.registerTask('build', 'Build the project', ['build-commons']);
  grunt.registerTask('default', 'Default task', ['build']);
  grunt.registerTask('serve', 'Start a local dev server', ['build', 'connect:server', 'watch']);
};

function configureTemplate(env, grunt) {
  let globals = grunt.option('template') || {};
  let codexCategory = grunt.option('template-codex-category') || globals.codexCategory || 'WebConfig';
  let userName = grunt.option('template-user') || globals.user ||
    'AuthenticationUtils.getUserLogin(request.getRemoteUser())';
  let serviceHost = grunt.option('template-service-host') || globals.serviceHost || 'http://mehtasan-dev-reportmanager.nyc.deshaw.com:30001/';
  let contextRoot = grunt.option('template-context-root') || globals.contextRoot || '/report-manager/';
  let codexFilePath = grunt.option('template-codex-filepath') || 'dist/js/codex-properties.js';

  let templateConfig = {
    options: {
      delimiters: 'handlebars-like-delimiters'
    },
    target: {
      options: {
        data: {
          startTag: '<%', // StartTag and endTag are needed as <% * %> will be interpolated by grunt before the plugin
          endTag: '%>',
          user: `{{= startTag }}= ${userName} {{= endTag}}`,
          codexProperties: `<script>var CODEX_PROPERTIES = <codex:propertySet category="${codexCategory}" /></script>`,
          codexTaglib: '{{= startTag }}@ taglib prefix="codex" uri="http://deshaw.com/codex/taglib"{{= endTag }}',
          userTaglib: '{{= startTag }}@page import="deshaw.auth.authentication.AuthenticationUtils"{{= endTag }}',
          codexImport: '{{= startTag }}@page import="deshaw.codex.Codex"{{= endTag }}',
          udsUrl: '{{= startTag }}=Codex.getLibraryConfiguration("report-manager")'+
                  '.getString("arcesium.repinfra.frontend.udsurl"){{= endTag }}',
          serviceHost: '',
          contextRoot: ''
        }
      },
      files: [{
        expand: true,
        cwd: 'dist',
        src: ['*.html'],
        dest: 'dist',
        ext: '.html'
      }, {
        expand: true,
        cwd: 'src',
        src: ['*.html'],
        dest: 'dist',
        ext: '.html'
      }]
    }
  };
  if (env === 'dev') {
    templateConfig.target.options.data.user = '';
    templateConfig.target.options.data.codexProperties = '<script src="../js/codex-properties.js"></script>';
    templateConfig.target.options.data.codexTaglib = '';
    templateConfig.target.options.data.userTaglib = '';
    templateConfig.target.options.data.codexImport = '';
    templateConfig.target.options.data.serviceHost = `<script>var SERVICE_HOST = '${serviceHost}';</script>`;
    templateConfig.target.options.data.contextRoot = `<script>var CONTEXT_ROOT = '${contextRoot}';</script>`;
    templateConfig.target.options.data.udsUrl= 'http://uds.deshaw.com';
  }

  // Include codex properties in template data
  if (grunt.file.exists(codexFilePath)) {
    let codexProperties = grunt.file.readJSON(codexFilePath);
    templateConfig.target.options.data.codexProperty = {};
    for (let property in codexProperties) {
      let propertyPaths = property.split('.');
      let value = env === 'dev' ? codexProperties[property] : `<codex:property property='${property}' />`;
      createNestedObject(templateConfig.target.options.data.codexProperty, propertyPaths, value);
    }
  }

  grunt.template.addDelimiters('handlebars-like-delimiters', '{{', '}}');
  grunt.config('template', templateConfig);
}

function createNestedObject(base, names, value) {
  // If a value is given, remove the last name and keep it for later:
  let lastName = arguments.length === 3 ? names.pop() : false;

  // Walk the hierarchy, creating new objects where needed.
  // If the lastName was removed, then the last object is not set yet:
  for (let i = 0; i < names.length; i++) {
    base = base[names[i]] = base[names[i]] || {};
  }

  // If a value was given, set it to the last name:
  if (lastName) base = base[lastName] = value;

  // Return the last object in the hierarchy:
  return base;
}


function configureBuildTask(env, grunt) {
  let componentsBuildPipeline = ['vulcanize', 'dom_munger', 'surround'];
  let buildPipeline = ['eslint', 'sass', 'browserify', 'extract_sourcemap'].concat(
    componentsBuildPipeline).concat(['uglify', 'template']);

  grunt.registerTask('build-components', ['clean', 'template', 'eslint', 'sass', 'browserify:components',
    'extract_sourcemap:components'
  ].concat(componentsBuildPipeline).concat(['uglify:components']));

  if (env === 'dev') {
    grunt.registerTask('build-commons', buildPipeline.concat(['copy:js-sourcemaps', 'copy:scss-sourcemaps',
      'copy:assets'
    ]));
  } else {
    grunt.registerTask('build-commons', buildPipeline.concat(['copy:assets']));
  }
}

/**
 * Generates codex-properties file and setup a bootstrap task
 */
function configureBootstrapTask(env, grunt) {
  let globals = grunt.option('bootstrap') || {};
  let codexResource = grunt.option('bootstrap-codex-resource') || globals.codexResource;
  let codexEnvironment = grunt.option('bootstrap-codex-environment') || globals.codexEnvironment || 'desco.dev';
  let codexServiceURL =
    `http://codex.deshaw.com/service/codexService/getConfigurationFromZK?a=${codexResource}&b=${codexEnvironment}&format=json`;
  let codexCategory = grunt.option('bootstrap-codex-category') || globals.codexCategory || 'WebConfig';
  let dest = grunt.option('bootstrap-codex-dest') || globals.codexDest || 'dist/js/codex-properties.js';
  let http = require('http');

  grunt.registerTask('bootstrap', 'Bootstrap development', function() {
    let done = this.async();
    if (typeof codexResource === 'undefined' || codexResource === null) {
      done(new Error('Codex resource name is mandatory. --bootstrap-codex-resource || grunt.option(codexResource)'));
    }
    http.get(codexServiceURL,
      (res) => {
        let responseText = '';
        console.log(`Response code: ${res.statusCode}`);
        // consume response body
        res.on('data', (chunk) => {
          responseText += chunk;
        });
        res.on('end', () => {
          let response, codexProperties = {};
          try {
            let configurations;
            response = JSON.parse(responseText);

            configurations = response.configurationElements;

            for (let configuration of configurations) {
              let attributeValue = configuration.attributeValue;
              if (configuration.categoryName === codexCategory) {
                switch (configuration.attributeType) {
                  case 'JSON_OBJECT':
                    attributeValue = JSON.parse(attributeValue);
                    break;
                  case 'INTEGER':
                  case 'FLOAT':
                  case 'DOUBLE':
                  case 'BYTE':
                  case 'LONG':
                    attributeValue = Number(attributeValue);
                    break;
                  case 'BOOLEAN':
                    attributeValue = (attributeValue.toLowerCase() === 'true');
                    break;
                  case 'STRING_LIST':
                    attributeValue = attributeValue.split(',');
                    break;
                  case 'INTEGER_ARRAY':
                  case 'FLOAT_ARRAY':
                  case 'DOUBLE_ARRAY':
                  case 'BYTE_ARRAY':
                  case 'LONG_ARRAY':
                    attributeValue = attributeValue.split(',').map((item) => Number(item));
                    break;
                }
                codexProperties[configuration.attributeName] = attributeValue;
              }
            }

            // Write properties to file
            grunt.file.write(dest, JSON.stringify(codexProperties));
            console.log(response);
          } catch (e) {
            done(new Error('Error in parsing JSON', e));
          }
          done();
        });

      }).on('error', (e) => {
      done(e);
    });
  });
}
